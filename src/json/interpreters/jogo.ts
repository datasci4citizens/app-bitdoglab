export function interpreterGame(data: { isStarted: boolean }): string[] {
	if (!data.isStarted) {
		return ["# Game not started"];
	}

	return [
		"while True:",
		"    # Primeira parte: Seta esquerda e espera pelo botão A",
		"    seta_Esquerda()",
		"    time.sleep(.5)",
		"    clear_all()",
		"    time.sleep(.2)",
		"    seta_Esquerda()",
		"    time.sleep(.3)",
		"    clear_all()",
		"    time.sleep(.3)",
		"    seta_Esquerda()",
		"    ",
		"    messages = [",
		'    "           ",',
		'    "           ",',
		'    "    APERTE  ",',
		'    "           ",',
		'    "       A     ",',
		'    "           ",',
		'    "           ",',
		'    "           "',
		"    ]",
		"    update_oled(messages)",
		"    ",
		"    # Aguarde até o Botão A ser pressionado",
		"    while button_a.value():",
		"        time.sleep(0.1)",
		"    ",
		"    clear_all()",
		"    xplosion()",
		"    ",
		"    # Segunda parte: Seta direita e espera pelo botão B",
		"    seta_Direita()",
		"    time.sleep(.5)",
		"    clear_all()",
		"    time.sleep(.2)",
		"    seta_Direita()",
		"    time.sleep(.3)",
		"    clear_all()",
		"    time.sleep(.3)",
		"    seta_Direita()",
		"    ",
		"    messages = [",
		'    "           ",',
		'    "           ",',
		'    "    APERTE  ",',
		'    "           ",',
		'    "       B     ",',
		'    "           ",',
		'    "           ",',
		'    "           "',
		"    ]",
		"    update_oled(messages)",
		"    ",
		"    # Aguarde até o Botão B ser pressionado",
		"    while button_b.value():",
		"        time.sleep(0.1)",
		"    ",
		"    clear_all()",
		"    xplosion()",
		"    ",
		"    update_oled('             ')",
		"    update_oled('Mova Joystick')",
		"    ",
		"    messages = [",
		'    "           ",',
		'    " Mova Joystick ",',
		'    "           ",',
		'    "           ",',
		'    "           ",',
		'    "           ",',
		'    "           ",',
		'    "           "',
		"    ]",
		"    update_oled(messages)",
		"    ",
		"    time.sleep(1)",
		"    colors = [",
		"        GREEN, GREEN, GREEN, GREEN, BLACK,",
		"        BLACK, GREEN, GREEN, BLACK, BLACK,",
		"        BLACK, BLACK,  GREEN, GREEN, BLACK,",
		"        BLACK, GREEN, BLACK, GREEN, BLACK,",
		"        GREEN, BLACK, BLACK, GREEN, BLACK",
		"    ]",
		"    ",
		"    # Atribuindo as cores à matriz np",
		"    for i, color in enumerate(colors):",
		"        np[i] = color",
		"    ",
		"    np.write()",
		"    time.sleep(2)",
		"    ",
		"    # Joystick control mode",
		"    while True:",
		"        vrx_value = adc_vrx.read_u16()",
		"        vry_value = adc_vry.read_u16()",
		"        ",
		"        messages = [",
		'        "           ",',
		'        "           ",',
		'        "   APERTE  ",',
		'        "           ",',
		'        "     B     ",',
		'        "      para   ",',
		'        "           ",',
		'        "    SAIR   "',
		"        ]",
		"        update_oled(messages)",
		"        ",
		"        offsetx = 0",
		"        offsety = 400",
		"        row = map_value(vrx_value - offsetx, 240, 65279, 0, 4)",
		"        col = map_value(vry_value - offsety, 65278, 240, 0, 4)",
		"        ",
		"        for i in range(NUM_LEDS):",
		"            np[i] = (0, 0, 0)",
		"        ",
		"        led_index = LED_MATRIX[row][col]",
		"        np[led_index] = cores[indice_cor]",
		"        np.write()",
		"        ",
		"        if not joystick_button.value():",
		"            indice_cor = (indice_cor + 1) % len(cores)",
		"            star_trek_beep()",
		"            print('Botão do joystick pressionado. Mudando a cor.')",
		"        ",
		"        if not button_b.value():",
		"            print('Botão B pressionado. Saindo do modo de controle do joystick.')",
		"            update_oled('                ')",
		"            break",
		"        ",
		"        time.sleep(0.1)",
		"    ",
		"    # Wait for button release",
		"    while not button_b.value():",
		"        time.sleep(0.1)",
		"    ",
		"    update_oled('             ')",
		"    update_oled('Escutando')",
		"    ",
		"    messages = [",
		'    "  Escutando ",',
		'    "           ",',
		'    "   APERTE  ",',
		'    "           ",',
		'    "     B     ",',
		'    "      para   ",',
		'    "           ",',
		'    "    SAIR     "',
		"    ]",
		"    update_oled(messages)",
		"    ",
		"    # VU Meter mode",
		"    while True:",
		"        if button_b.value():",
		"            adc_value = adc.read_u16()",
		"            vu_meter(adc_value)",
		"            time.sleep(0.02)",
		"        else:",
		"            print('Botão B pressionado. Saindo do modo VU Meter.')",
		"            break",
		"            update_oled('             ')",
		"            update_oled(' OLA EHUMANO')",
		"            ",
		"            messages = [",
		'            "           ",',
		'            "           ",',
		'            "   OLA EHUMANO  ",',
		'            "           ",',
		'            "           ",',
		'            "           ",',
		'            "           ",',
		'            "           "',
		"            ]",
		"            update_oled(messages)"
	];
}
